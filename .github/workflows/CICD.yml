name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -Dtestskip

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=201
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
      

      
          

      - name: Pull and Run Docker Container
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            
            CONTAINER_NAME=""
            STOP_CONTAINER=""
            PORT=""
            PROFILE=""
            
            RUNNING=$(sudo docker ps --filter "name=blue" --format "{{.Names}}")
            if [ "$RUNNING" == "blue" ]; then
             CONTAINER_NAME="green"
             STOP_CONTAINER="blue"
             PORT="8081:8081"
             PROFILE="green"
            else
             CONTAINER_NAME="blue"
             STOP_CONTAINER="green"
             PORT="8080:8080"
             PROFILE="blue"
            fi
            
            # Start new container
            sudo docker run -d \
             --name $CONTAINER_NAME \
             -p $PORT \
             -e PROFILES=$PROFILE \
             -e ENV=$PROFILE \
             -e DB_URL=${{ secrets.DB_URL }} \
             -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
             -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
             ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            
            # Stop and remove the old container
            sudo docker ps -a --filter "name=$STOP_CONTAINER" --format "{{.ID}}" | xargs -r sudo docker rm -f || true

          #sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
      
      #- name: Check deploy server URL
      #  uses: jtalk/url-health-check-action@v3
      #  with:
      #    url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
      #    max-attempts: 3
      #    retry-delay: 10s

      #- name: Change nginx upstream
      #  uses: appleboy/ssh-action@master
      #  with:
      #    username: ubuntu
      #    host: ${{ secrets.LIVE_SERVER_IP }}
      #    key: ${{ secrets.EC2_SSH_KEY }}
      #    script_stop: true
      #    script: |
      #      sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 


